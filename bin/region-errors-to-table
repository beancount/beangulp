#!/usr/bin/env python3
"""Given a region in a Beancount, extract incomplete transactions to a table.

This script accepts a top-level filename, a filename and start:end locations. It
will look for transactions with a `!` flag either on the transaction or on any
of its postings, and convert those to a simple table.
"""
__copyright__ = "Copyright (C) 2022  Martin Blais"
__license__ = "GNU GPLv2"

from itertools import chain
from os import path
from typing import Iterable, List, Tuple
import argparse
import fnmatch
import functools
import logging
import os
import re
import shutil

import click
import petl

from beancount import loader
from beancount.core import data
from beancount.core import flags
from beancount.parser import printer
from beancount.scripts import doctor


petl.config.look_style = "minimal"
petl.config.failonerror = True


@click.command()
@click.argument("filename", type=click.Path(resolve_path=True, exists=True))
@click.argument("region", type=doctor.FileRegion())
def region_to_table(filename: str, region: Tuple[str, int, int]):
    entries, errors, options_map = loader.load_file(filename)
    region_entries = doctor.resolve_region_to_entries(entries, filename, region)
    rows = entries_to_table(
        [txn for txn in data.filter_txns(region_entries) if is_error(txn)]
    )
    petl.wrap(rows).tocsv(petl.StdoutSource())


def is_error(txn: data.Transaction) -> bool:
    return txn.flag == flags.FLAG_WARNING or any(
        posting.flag == flags.FLAG_WARNING for posting in txn.postings
    )


def entries_to_table(txns: Iterable[data.Directives]) -> List[str]:
    header = ["date", "flag", "payee", "narration", "links", "pflag", "account", "number", "currency"]
    return chain(
        [header],
        [
            (
                txn.date,
                txn.flag,
                txn.payee,
                txn.narration,
                " ".join(sorted(txn.links)),
                txn.postings[0].flag or "",
                txn.postings[0].account,
                txn.postings[0].units.number,
                txn.postings[0].units.currency,
            )
            for txn in txns
        ],
    )


if __name__ == "__main__":
    region_to_table()
